draw_group = function(data, panel_params, coord) {
coords <- coord$transform(data, panel_params)
event_label_point = pointsGrob(
x=coords$x,
y=coords$y,
pch = 21,
size = unit(1, "char")
)
gp = gpar(col = coords$colour, alpha = coords$alpha)
event_label_text = textGrob(
label = coords$label,
x = coords$x,
y = coords$y,
just = c("left", "bottom"),
rot = 0,
gp = gpar(fontsize = 10, alpha = 1, col = coords$colour)
)
gTree(children = gList(event_label_point, event_label_text))
}
)
geom_eventlabel <- function(mapping = NULL,
data = NULL,
stat = "identity",
position = "identity",
na.rm = FALSE,
show.legend = NA,
inherit.aes = TRUE,
...) {
layer(
geom = GeomEventlabel, mapping = mapping,
data = data, stat = stat, position = position,
show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
download.file(url = "https://covid.ourworldindata.org/data/owid-covid-data.csv", destfile = "owid-covid-data.csv")
# load data
raw <- data.table::fread("owid-covid-data.csv")
raw_summary <- raw |> summary()
raw_summary
locations_with_no_total_cases_record <-
raw |>
sel_cols(location, total_cases) |>
def_cols(is.na ~ is.na(total_cases)) |>
set_group(location, is.na) |>
condense(no_of_na_record = .N) |>
spread(is.na, no_of_na_record)
raw
locations_with_no_total_cases_record <-
raw |>
sel_cols(location, total_cases) #|>
locations_with_no_total_cases_record <-
raw |>
sel_cols(location, total_cases) |>
def_cols(is.na ~ is.na(total_cases)) #|>
locations_with_no_total_cases_record <-
raw |>
sel_cols(location, total_cases)
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols(is.na ~ is.na(total_cases))
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols(is.na ~ is.na(locations_with_no_total_cases_record$total_cases))
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols(`is.na` ~ is.na(locations_with_no_total_cases_record$total_cases))
locations_with_no_total_cases_record
locations_with_no_total_cases_record
is.na(locations_with_no_total_cases_record$total_cases)
locations_with_no_total_cases_record <-
raw |>
sel_cols(location, total_cases)
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols(`is.na` ~ is.na(locations_with_no_total_cases_record$total_cases))
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols(`is.na` ~ total_cases)
locaitons_with_no_total_cases_record
locations_with_no_total_cases_record
def_cols(locations_with_no_total_cases_record, temp ~ 1)
knitr::opts_chunk$set(echo = FALSE,
cached = TRUE,
warning = FALSE,
root.dir = paste0(getwd(),"/R/COVID-19")
)
getwd()
# To install wr.data.table use:
# devtools::install_github("kleu046/wr.data.table")
library(wr.data.table)
library(ggplot2)
library(grid)
library(gridExtra)
library(lubridate)
library(stringr)
slate_blue_zeroline <- "rgb(91,124,153)"
slate_blue_zeroline_hex <- "#5B7C99"
slate_blue_border <- "rgb(130,154,183)"
slate_blue_border_hex <- "#829AB7"
slate_blue_marker <- "rgb(30, 66, 125)"
slate_blue_marker_hex <- "#1E427D"
covid_cases_marker <- "rgb(255,223,0)"
covid_cases_marker_hex <- "#ffdf00"
covid_deaths_marker <- "rgb(255,112,112)"
covid_deaths_marker_hex <- "#ff7070"
mytheme <- theme_get()
if (Sys.info()[1] != "Windows") {
mytheme <-
theme(
plot.title = element_text(
face = "plain",
family = "Avenir Next",
size = 20,
colour = "black"
),
plot.subtitle = element_text(
face = "italic",
family = "Avenir Next",
size = 16,
colour = "black"
),
axis.title = element_text(
face= "plain",
family = "Avenir Next",
size = 12,
#colour = "slategray4"
colour = slate_blue_marker_hex
),
axis.text = element_text(
face= "plain",
family = "Skia",
size = 10,
#colour = "slategray4"
colour = slate_blue_marker_hex
),
axis.line = element_line(
# colour = "slategray2",
colour = slate_blue_zeroline_hex,
size = 0.3
),
panel.grid.major = element_line(
# colour = "gray90",
colour = "grey80",
size = 0.1
),
panel.grid.minor = element_blank(),
legend.title = element_text(
face = "plain",
family = "Avenir Next",
size = 12,
# colour = "slategray4"
colour = slate_blue_marker_hex
),
legend.text = element_text(
face = "plain",
family = "Skia",
size = 10,
# colour = "slategray4"
colour = slate_blue_marker_hex
),
panel.background = element_blank(),
panel.border = element_rect(
#colour = "azure3",
colour = slate_blue_border_hex,
size = 5,
fill = NA
),
plot.caption.position = "panel",
plot.caption = element_text(
hjust = 0,
family = "Skia",
face = "italic",
#color = "slategray3"
color = slate_blue_marker_hex
)
)
}
GeomEventlabel <-
ggproto(
"GeomEventlabel",
Geom,
required_aes = c("x", "y", "label"),
default_aes = aes(colour = "grey", alpha = 0.6),
draw_key = draw_key_point,
draw_group = function(data, panel_params, coord) {
coords <- coord$transform(data, panel_params)
event_label_point = pointsGrob(
x=coords$x,
y=coords$y,
pch = 21,
size = unit(1, "char")
)
gp = gpar(col = coords$colour, alpha = coords$alpha)
event_label_text = textGrob(
label = coords$label,
x = coords$x,
y = coords$y,
just = c("left", "bottom"),
rot = 0,
gp = gpar(fontsize = 10, alpha = 1, col = coords$colour)
)
gTree(children = gList(event_label_point, event_label_text))
}
)
geom_eventlabel <- function(mapping = NULL,
data = NULL,
stat = "identity",
position = "identity",
na.rm = FALSE,
show.legend = NA,
inherit.aes = TRUE,
...) {
layer(
geom = GeomEventlabel, mapping = mapping,
data = data, stat = stat, position = position,
show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
download.file(url = "https://covid.ourworldindata.org/data/owid-covid-data.csv", destfile = "owid-covid-data.csv")
# load data
raw <- data.table::fread("owid-covid-data.csv")
raw_summary <- raw |> summary()
raw_summary
locations_with_no_total_cases_record <-
raw |>
sel_cols(location, total_cases)
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols(`is.na` ~ total_cases)
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols("is.na" ~ total_cases)
locations_with_no_total_cases_record <-
raw |>
sel_cols(location, total_cases)
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols("is.na" ~ total_cases)
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols("is.na" ~ is.na(total_cases))
class(locations_with_no_total_cases_record)
locations_with_no_total_cases_record <-
raw |>
sel_cols(location, total_cases)
class(raw)
def_cols(raw, temp~1)
mkdt()
def_cols(dt, mpg2=mpg*2)
dt1 <0 def_cols(dt, mpg2=mpg*2)
dt1 <- def_cols(dt, mpg2=mpg*2)
dt1
dt1 <- def_cols(dt, mpg2=mpg*2)
devtools::load_all()
dt1 <- def_cols(dt, mpg2=mpg*2)
dt1
devtools::load_all()
mkdt()
x <- as.integer(round(runif(nrow(dt), 0, 1), digits=0))
x <- replace(x, x == 0, NA)
y <- as.integer(round(runif(nrow(dt), 0, 1), digits=0))
y <- replace(y, y == 0, NA)
dt <- def_cols(dt, x.na ~ x, y.na ~ y)
dt <- def_cols(dt, both_na ~ ifelse(is.na(x.na) & is.na(y.na), 0, 1))
dt
knitr::opts_chunk$set(echo = FALSE,
cached = TRUE,
warning = FALSE,
root.dir = paste0(getwd(),"/R/COVID-19")
)
getwd()
# To install wr.data.table use:
# devtools::install_github("kleu046/wr.data.table")
library(wr.data.table)
library(ggplot2)
library(grid)
library(gridExtra)
library(lubridate)
library(stringr)
slate_blue_zeroline <- "rgb(91,124,153)"
slate_blue_zeroline_hex <- "#5B7C99"
slate_blue_border <- "rgb(130,154,183)"
slate_blue_border_hex <- "#829AB7"
slate_blue_marker <- "rgb(30, 66, 125)"
slate_blue_marker_hex <- "#1E427D"
covid_cases_marker <- "rgb(255,223,0)"
covid_cases_marker_hex <- "#ffdf00"
covid_deaths_marker <- "rgb(255,112,112)"
covid_deaths_marker_hex <- "#ff7070"
mytheme <- theme_get()
if (Sys.info()[1] != "Windows") {
mytheme <-
theme(
plot.title = element_text(
face = "plain",
family = "Avenir Next",
size = 20,
colour = "black"
),
plot.subtitle = element_text(
face = "italic",
family = "Avenir Next",
size = 16,
colour = "black"
),
axis.title = element_text(
face= "plain",
family = "Avenir Next",
size = 12,
#colour = "slategray4"
colour = slate_blue_marker_hex
),
axis.text = element_text(
face= "plain",
family = "Skia",
size = 10,
#colour = "slategray4"
colour = slate_blue_marker_hex
),
axis.line = element_line(
# colour = "slategray2",
colour = slate_blue_zeroline_hex,
size = 0.3
),
panel.grid.major = element_line(
# colour = "gray90",
colour = "grey80",
size = 0.1
),
panel.grid.minor = element_blank(),
legend.title = element_text(
face = "plain",
family = "Avenir Next",
size = 12,
# colour = "slategray4"
colour = slate_blue_marker_hex
),
legend.text = element_text(
face = "plain",
family = "Skia",
size = 10,
# colour = "slategray4"
colour = slate_blue_marker_hex
),
panel.background = element_blank(),
panel.border = element_rect(
#colour = "azure3",
colour = slate_blue_border_hex,
size = 5,
fill = NA
),
plot.caption.position = "panel",
plot.caption = element_text(
hjust = 0,
family = "Skia",
face = "italic",
#color = "slategray3"
color = slate_blue_marker_hex
)
)
}
GeomEventlabel <-
ggproto(
"GeomEventlabel",
Geom,
required_aes = c("x", "y", "label"),
default_aes = aes(colour = "grey", alpha = 0.6),
draw_key = draw_key_point,
draw_group = function(data, panel_params, coord) {
coords <- coord$transform(data, panel_params)
event_label_point = pointsGrob(
x=coords$x,
y=coords$y,
pch = 21,
size = unit(1, "char")
)
gp = gpar(col = coords$colour, alpha = coords$alpha)
event_label_text = textGrob(
label = coords$label,
x = coords$x,
y = coords$y,
just = c("left", "bottom"),
rot = 0,
gp = gpar(fontsize = 10, alpha = 1, col = coords$colour)
)
gTree(children = gList(event_label_point, event_label_text))
}
)
geom_eventlabel <- function(mapping = NULL,
data = NULL,
stat = "identity",
position = "identity",
na.rm = FALSE,
show.legend = NA,
inherit.aes = TRUE,
...) {
layer(
geom = GeomEventlabel, mapping = mapping,
data = data, stat = stat, position = position,
show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
download.file(url = "https://covid.ourworldindata.org/data/owid-covid-data.csv", destfile = "owid-covid-data.csv")
# load data
raw <- data.table::fread("owid-covid-data.csv")
raw_summary <- raw |> summary()
raw_summary
locations_with_no_total_cases_record <-
raw |>
sel_cols(location, total_cases)
locations_with_no_total_cases_record
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols("is.na" ~ is.na(total_cases))
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols("isna" ~ is.na(total_cases))
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols("isna" ~ is.na(locations_with_no_total_cases_record$total_cases))
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols(is_na ~ is.na(locations_with_no_total_cases_record$total_cases))
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols(is_na ~ is.na(total_cases))
devtools::load_all()
mkdt()
x <- as.integer(round(runif(nrow(dt), 0, 1), digits=0))
x <- replace(x, x == 0, NA)
y <- as.integer(round(runif(nrow(dt), 0, 1), digits=0))
y <- replace(y, y == 0, NA)
dt <- def_cols(dt, x.na ~ x, y.na ~ y)
dt <- def_cols(dt, both_na ~ ifelse(is.na(x.na) & is.na(y.na), 0, 1))
dt
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols(na ~ is.na(total_cases))
locations_with_no_total_cases_record <-
raw |>
sel_cols(location, total_cases)
locations_with_no_total_cases_record
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols(na ~ is.na(total_cases))
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols(na ~ is.na(total_cases))
dt <- def_cols(dt, both_na ~ ifelse(is.na(x.na) & is.na(y.na), 0, 1))
dt
locations_with_no_total_cases_record <-
raw |>
sel_cols(location, total_cases)
locations_with_no_total_cases_record
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols(na ~ is.na(total_cases))
rm(dt)
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
set_group(location, is.na) |>
condense(no_of_na_record = .N) |>
spread(is.na, no_of_na_record)
locations_with_no_total_cases_record <-
raw |>
sel_cols(location, total_cases)
locations_with_no_total_cases_record
rm(def_cols_copy_dt)
locations_with_no_total_cases_record <-
raw |>
sel_cols(location, total_cases)
locations_with_no_total_cases_record
locations_with_no_total_cases_record <-
locations_with_no_total_cases_record |>
def_cols(na ~ is.na(total_cases))
def_cols(data.table(mtcars), test ~ mpg > 19)
dt <- def_cols(dt, both_na ~ ifelse(is.na(x.na) & is.na(y.na), 0, 1), mpggreaterthan19 ~ mpg > 19)
devtools::load_all()
mkdt()
x <- as.integer(round(runif(nrow(dt), 0, 1), digits=0))
x <- replace(x, x == 0, NA)
y <- as.integer(round(runif(nrow(dt), 0, 1), digits=0))
y <- replace(y, y == 0, NA)
dt <- def_cols(dt, x.na ~ x, y.na ~ y)
dt <- def_cols(dt, both_na ~ ifelse(is.na(x.na) & is.na(y.na), 0, 1), mpggreaterthan19 ~ mpg > 19)
dt
devtools::load_all()
mkdt()
x <- as.integer(round(runif(nrow(dt), 0, 1), digits=0))
x <- replace(x, x == 0, NA)
y <- as.integer(round(runif(nrow(dt), 0, 1), digits=0))
y <- replace(y, y == 0, NA)
dt1 <- def_cols(dt, x.na ~ x, y.na ~ y)
dt1 <- def_cols(dt, both_na ~ ifelse(is.na(x.na) & is.na(y.na), 0, 1), mpggreaterthan19 ~ mpg > 19)
dt1
def_cols(data.table(mtcars), test ~ mpg > 19)
def_cols(data.table(mtcars), test ~ mpg > 19)
def_cols(data.table(mpg), test ~ mpg > 19)
def_cols(data.table(raw), test ~ new_cases)
devtools::load_all()
mkdt()
dt1 <- dt
x <- as.integer(round(runif(nrow(dt), 0, 1), digits=0))
x <- replace(x, x == 0, NA)
y <- as.integer(round(runif(nrow(dt), 0, 1), digits=0))
y <- replace(y, y == 0, NA)
dt1 <- def_cols(dt1, x.na ~ x, y.na ~ y)
dt1 <- def_cols(dt1, both_na ~ ifelse(is.na(x.na) & is.na(y.na), 0, 1), mpggreaterthan19 ~ mpg > 19)
dt1
