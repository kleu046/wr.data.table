#'
#' @export
wr_select <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
argsAsString <- as.character(as.list(match.call())[-1:-2])
# isRange
isRange <- unlist(lapply(argsAsString, function(x) {grepl(":", x)}))
rangeAsString <- argsAsString[isRange]
expandedRangeAsString <- lapply(rangeAsString, function(x) {expand_colnames(dt, x)})
expandedRangeAsString <- unique(unlist(expandedRangeAsString))
# !isRange
individualAsString <- unique(argsAsString[!isRange])
copy(dt)[,unique(c(expandedRangeAsString, individualAsString)),with=F]
}
wr_select(dt, mpg:cyl, am, vs, vs, cyl:hp, disp)
wr_select(dt, mpg:cyl, am, vs, vs, cyl:hp, disp, vs:am)
# good code to select range and separate columns at the same time
wr_select1 <- function(dt, ...) {
expr <- match.call()
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(expr[-1:-2])
# isRange
isRange <- NULL
isRange <- unlist(lapply(expr, function(x) {grepl(":", deparse(x))}))
dt_range <- data.table()
if (length(expr[isRange]) >= 1) {
rangeargsAsStrings <- unlist(lapply(expr[isRange], function(x) { deparse(x) }))
for (s in rangeargsAsStrings) {
callAsString <- paste0("copy(dt)[,",s,"]")
dt_range <- cbind(dt_range,eval(parse(text=callAsString)))
}
}
# !is_Range
dt_separate <- data.table()
if (length(expr[!isRange]) >= 1) {
constructCall <- as.call(c(as.name("list"),c(expr[!isRange])))
dt_separate <- copy(dt)[,eval(constructCall)]
}
dt_result <- cbind(dt_range, dt_separate)
if (length(unique(colnames(dt_result))) < length(dt_result)) {
warning("Non-unique column/variable names in returned data.table")
}
dt_result
}
#' @return a \code{data.table}
#'
#' @examples \dontrun{
#' dt <- data.table(mtcars)
#'
#' }
#'
#' @import data.table
#'
#' @export
wr_select <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
argsAsString <- as.character(as.list(match.call())[-1:-2])
# isRange
isRange <- unlist(lapply(argsAsString, function(x) {grepl(":", x)}))
rangeAsString <- argsAsString[isRange]
expandedRangeAsString <- lapply(rangeAsString, function(x) {expand_colnames(dt, x)})
expandedRangeAsString <- unique(unlist(expandedRangeAsString))
# !isRange
individualAsString <- unique(argsAsString[!isRange])
copy(dt)[,unique(c(expandedRangeAsString, individualAsString)),with=F]
}
dt
microbenchmark::microbenchmark(
wr_select(dt, mpg:hp, am, vs, cyl:drat)
wr_select1(dt, mpg:hp, am, vs, cyl:drat)
)
microbenchmark::microbenchmark(
wr_select(dt, mpg:hp, am, vs, cyl:drat),
wr_select1(dt, mpg:hp, am, vs, cyl:drat)
)
wr_select(dt, cyl:mpg)
wr_select(dt, cyl:mpg, drat)
wr_select(dt, gear:mpg, drat)
devtools::test()
devtools::load_all()
library(wr.data.table)
devtools::test()
c("a","b") %in% c("a","b","c")
library(wr.data.table)
devtools::test()
#' $group is a vector of variable anmes
#'
#' @usage wr_groupby(dt, ...)
#'
#' @param dt a \code{data.table}
#' @param ... names of variables that are used for grouping
#'
#' @import data.table
#'
#' @export
wr_groupby <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
argsAsString <- as.character(as.list(match.call())[-1:-2])
isRange <- grepl(":", argsAsString)
# find columns in range
rangeAsString <- argsAsString[isRange]
expandedRangeAsString <- lapply(rangeAsString, function(x) {expand_colnames(dt, x)})
# find individual columns
colAsString <- argsAsString[!isRange]
combinedColsAsString <- unique(c(unlist(expandedRangeAsString), unlist(colAsString)))
# combine
if(!all(combinedColsAsString %in% colnames(dt))) {
stop("one or more column names in ... does not exist")
} else {
attr(dt, "group") <- combinedColsAsString
dt
}
}
devtools::test()
library(wr.data.table)
devtools::test()
library(wr.data.table)
devtools::test()
mkdt()
testthat::expect_error(wr_select(dt, mpg, mpp, mpg:hp))
result<-testthat::expect_error(wr_select(dt, mpg, mpp, mpg:hp))
result
devtools::test()
devtools::test()
dt
devtools::test()
devtools::test()
test_that("wr_select is working", {
expect_s3_class(wr_select(dt, mpg), "data.table")
expect_equal(colnames(wr_select(dt, vs, mpg:hp, am)),
c("mpg", "cyl", "disp", "hp", "vs", "am"))
expect_identical(ncol(wr_select(dt, vs, mpg:hp, am, gear:carb )),
ncol(dt[,.(mpg,cyl,disp,hp,vs,am,gear,carb)]))
expect_error(wr_select(dt, mpg, wrong_col_name, mpg:hp))
expect_error(wr_select(dt, "mpg"))
})
devtools::test()
wr_select(dt, "mpg")
wr_select(dt, "mpg", "hp")
wr_select(dt, c("mpg", "hp"))
wr_select(dt, list("mpg", "hp"))
wr_select(dt, c("mpg", "hp"))
wr_groupby(dt, "mpg", "gear")
attributes(wr_groupby(dt, "mpg", "gear")
)
library(wr.data.table)
mkdt()
library(wr.data.table)
mkdt(0)
mkdt()
dt[,!.(mpg,cyl)]
dt[,.(mpg,cyl)]
dt[,.(mpg,cyl)]
dt[,!.(mpg,cyl)]
dt[,-.(mpg,cyl)]
dt[,-.("mpg","cyl")]
dt[,-c("mpg","cyl")]
#' @description This function is similar to
#'
#' @usage wr_deselect(dt, ...)
#'
#' @param dt a \code{data.table}
#' @param ... some parameters
#'
#' @import data.table
#'
#' @export
wr_deselect <- function(dt, ...) {
expr <- match.call()
#dt <- copy(dt)
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(expr[-1:-2])
argsAsString <- as.character(as.list(match.call()))
# isRange
isRange <- unlist(lapply(argsAsString, function(x) {grepl(":", x)}))
rangeAsString <- argsAsString[isRange]
expandedRangeAsString <- lapply(rangeAsString, function(x) {expand_colnames(dt, x)})
expandedRangeAsString <- unlist(expandedRangeAsString)
# !isRange
individualAsString <- argsAsString[!isRange]
combinedColsAsString <- unique(c(expandedRangeAsString, individualAsString))
if(!all(combinedColsAsString %in% colnames(dt))) {
stop("one or more column names in ... does not exist")
} else {
copy(dt)[,-combinedColsAsString,with=F]
}
}
wr_deselect(mpg:cyl)
wr_deselect(dt, mpg:cyl)
library(wr.data.table)
wr_deselect(dt, mpg:cyl)
wr_select(dt, mpg:cyl)
wr_deselect(dt, mpg:cyl)
library(wr.data.table)
library(wr.data.table)
wr_deselect(dt, mpg:cyl)
mkdt)()
mkdt()
wr_deselect(dt, mpg:cyl)
library(wr.data.table)
mkdt()
wr_deselect(dt, mpg:cyl)
wr_deselect(dt, mpg:cyl, wt)
wr_deselect(dt, mpg:cyl, wt, carb)
wr_deselect(dt, mpg:cyl, wt, carb, gear)
wr_deselect(dt, vs:disp)
908*59
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(match.call())
args <- as.list(match.call())[-1:-2]
colNames <- names(expr)[3:length(names(expr))]
newColNames <- names(expr)
print(newColNames)
argsAsString <- list()
for (i in 3:length(expr)) {
argsAsString[i-2] <- deparse(expr[[i]])
argsExpr <- expr[[i]]
}
callAsString <- paste0("dt[,`:=`(",
paste(
paste(colNames, argsAsString,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
wr_assgnCols(dt, mpg2=mpg*2)
wr_assignCols(dt, mpg2=mpg*2)
wr_assigncols(dt, mpg2=mpg*2)
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(match.call())
args <- as.list(match.call())[-1:-2]
colNames <- names(expr)[3:length(names(expr))]
newColNames <- names(args)
print(newColNames)
argsAsString <- list()
for (i in 3:length(expr)) {
argsAsString[i-2] <- deparse(expr[[i]])
argsExpr <- expr[[i]]
}
callAsString <- paste0("dt[,`:=`(",
paste(
paste(colNames, argsAsString,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
wr_assigncols(dt, mpg2=mpg*2)
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(match.call())
args <- as.list(match.call())[-1:-2]
colNames <- names(expr)[3:length(names(expr))]
newColNames <- names(args)
print(newColNames)
argsAsString <- list()
print(args)
for (i in 3:length(expr)) {
argsAsString[i-2] <- deparse(expr[[i]])
argsExpr <- expr[[i]]
}
callAsString <- paste0("dt[,`:=`(",
paste(
paste(colNames, argsAsString,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
wr_assigncols(dt, mpg2=mpg*2)
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(match.call())
args <- as.list(match.call())[-1:-2]
colNames <- names(expr)[3:length(names(expr))]
newColNames <- names(args)
print(newColNames)
argsAsString <- list()
print(args)
print(paste(newColNames, args, sep"="))
for (i in 3:length(expr)) {
argsAsString[i-2] <- deparse(expr[[i]])
argsExpr <- expr[[i]]
}
callAsString <- paste0("dt[,`:=`(",
paste(
paste(colNames, argsAsString,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(match.call())
args <- as.list(match.call())[-1:-2]
colNames <- names(expr)[3:length(names(expr))]
newColNames <- names(args)
print(newColNames)
argsAsString <- list()
print(args)
print(paste(newColNames, args, sep="="))
for (i in 3:length(expr)) {
argsAsString[i-2] <- deparse(expr[[i]])
argsExpr <- expr[[i]]
}
callAsString <- paste0("dt[,`:=`(",
paste(
paste(colNames, argsAsString,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
wr_assigncols(dt, mpg2=mpg*2)
wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^33)
wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
args <- as.list(match.call())[-1:-2]
newColNames <- names(args)
callAsString <- paste0("dt[,`:=`(",
paste(
paste(newColNames, args,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
dt1 <- wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
dt1
dt1
dt
mkdt()
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
args <- as.list(match.call())[-1:-2]
newColNames <- names(args)
callAsString <- paste0("copy(dt)[,`:=`(",
paste(
paste(newColNames, args,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
dt1 <- wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
library(wr.data.table)
mkdt()
dt1 <- wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
library(wr.data.table)
dt1 <- wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
mkdt()
dt1 <- wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
dt1
dt1
dt
dt1
# wr_assignCols works
wr_assigncols1 <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(match.call())
colNames <- names(expr)[3:length(names(expr))]
argsAsString <- list()
for (i in 3:length(expr)) {
argsAsString[i-2] <- deparse(expr[[i]])
argsExpr <- expr[[i]]
}
callAsString <- paste0("dt[,`:=`(",
paste(
paste(colNames, argsAsString,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
microbenchmark::microbenchmark(
wr_assignCols(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assignCols1(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
)
microbenchmark::microbenchmark(
wr_assigncols(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assigncols1(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
)
wr_assigncols(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/'))
microbenchmark::microbenchmark(
wr_assigncols(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assigncols1(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/'))
)
microbenchmark::microbenchmark(
wr_assigncols(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assigncols1(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
times=500
)
microbenchmark::microbenchmark(
wr_assigncols(dt, mpg*2, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assigncols1(dt, mpg*2, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
times=500
)
microbenchmark::microbenchmark(
wr_assigncols(dt, mpg2=mpg*2, mpg2=mpg*2, mpg2=mpg*2, mpg2=mpg*2, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assigncols1(dt, mpg2=mpg*2, mpg2=mpg*2, mpg2=mpg*2, mpg2=mpg*2, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
times=500
)
microbenchmark::microbenchmark(
wr_assigncols(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assigncols1(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
times=500
)
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
args <- as.list(match.call())[-1:-2]
newColNames <- names(args)
callAsString <- paste0("copy(dt)[,`:=`(",
paste(
paste(newColNames, args,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
library(wr.data.table)
mkdt()
dt[,!.(map)]
dt[,!c(map)]
dt[,!c(mpg)]
dt[,!.(mpg)]
dt[,!.("mpg")]
dt[,!c("mpg")]
library(devtools)
test()
test()
dt
test()
wr_filter(dt, gear ==3 & mpg > 17)
dt[gear==3 & mpg>17,]
test()
