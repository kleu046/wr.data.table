rangeAsString <- argsAsString[isRange]
expandedRangeAsString <- lapply(rangeAsString, function(x) {expand_colnames(dt, x)})
# find individual columns
colAsString <- argsAsString[!isRange]
combinedColsAsString <- unique(c(unlist(expandedRangeAsString), unlist(colAsString)))
# combine
if(!all(combinedColsAsString %in% colnames(dt))) {
stop("one or more column names in ... does not exist")
} else {
attr(dt, "group") <- combinedColsAsString
dt
}
}
devtools::test()
library(wr.data.table)
devtools::test()
library(wr.data.table)
devtools::test()
mkdt()
testthat::expect_error(wr_select(dt, mpg, mpp, mpg:hp))
result<-testthat::expect_error(wr_select(dt, mpg, mpp, mpg:hp))
result
devtools::test()
devtools::test()
dt
devtools::test()
devtools::test()
test_that("wr_select is working", {
expect_s3_class(wr_select(dt, mpg), "data.table")
expect_equal(colnames(wr_select(dt, vs, mpg:hp, am)),
c("mpg", "cyl", "disp", "hp", "vs", "am"))
expect_identical(ncol(wr_select(dt, vs, mpg:hp, am, gear:carb )),
ncol(dt[,.(mpg,cyl,disp,hp,vs,am,gear,carb)]))
expect_error(wr_select(dt, mpg, wrong_col_name, mpg:hp))
expect_error(wr_select(dt, "mpg"))
})
devtools::test()
wr_select(dt, "mpg")
wr_select(dt, "mpg", "hp")
wr_select(dt, c("mpg", "hp"))
wr_select(dt, list("mpg", "hp"))
wr_select(dt, c("mpg", "hp"))
wr_groupby(dt, "mpg", "gear")
attributes(wr_groupby(dt, "mpg", "gear")
)
library(wr.data.table)
mkdt()
library(wr.data.table)
mkdt(0)
mkdt()
dt[,!.(mpg,cyl)]
dt[,.(mpg,cyl)]
dt[,.(mpg,cyl)]
dt[,!.(mpg,cyl)]
dt[,-.(mpg,cyl)]
dt[,-.("mpg","cyl")]
dt[,-c("mpg","cyl")]
#' @description This function is similar to
#'
#' @usage wr_deselect(dt, ...)
#'
#' @param dt a \code{data.table}
#' @param ... some parameters
#'
#' @import data.table
#'
#' @export
wr_deselect <- function(dt, ...) {
expr <- match.call()
#dt <- copy(dt)
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(expr[-1:-2])
argsAsString <- as.character(as.list(match.call()))
# isRange
isRange <- unlist(lapply(argsAsString, function(x) {grepl(":", x)}))
rangeAsString <- argsAsString[isRange]
expandedRangeAsString <- lapply(rangeAsString, function(x) {expand_colnames(dt, x)})
expandedRangeAsString <- unlist(expandedRangeAsString)
# !isRange
individualAsString <- argsAsString[!isRange]
combinedColsAsString <- unique(c(expandedRangeAsString, individualAsString))
if(!all(combinedColsAsString %in% colnames(dt))) {
stop("one or more column names in ... does not exist")
} else {
copy(dt)[,-combinedColsAsString,with=F]
}
}
wr_deselect(mpg:cyl)
wr_deselect(dt, mpg:cyl)
library(wr.data.table)
wr_deselect(dt, mpg:cyl)
wr_select(dt, mpg:cyl)
wr_deselect(dt, mpg:cyl)
library(wr.data.table)
library(wr.data.table)
wr_deselect(dt, mpg:cyl)
mkdt)()
mkdt()
wr_deselect(dt, mpg:cyl)
library(wr.data.table)
mkdt()
wr_deselect(dt, mpg:cyl)
wr_deselect(dt, mpg:cyl, wt)
wr_deselect(dt, mpg:cyl, wt, carb)
wr_deselect(dt, mpg:cyl, wt, carb, gear)
wr_deselect(dt, vs:disp)
908*59
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(match.call())
args <- as.list(match.call())[-1:-2]
colNames <- names(expr)[3:length(names(expr))]
newColNames <- names(expr)
print(newColNames)
argsAsString <- list()
for (i in 3:length(expr)) {
argsAsString[i-2] <- deparse(expr[[i]])
argsExpr <- expr[[i]]
}
callAsString <- paste0("dt[,`:=`(",
paste(
paste(colNames, argsAsString,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
wr_assgnCols(dt, mpg2=mpg*2)
wr_assignCols(dt, mpg2=mpg*2)
wr_assigncols(dt, mpg2=mpg*2)
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(match.call())
args <- as.list(match.call())[-1:-2]
colNames <- names(expr)[3:length(names(expr))]
newColNames <- names(args)
print(newColNames)
argsAsString <- list()
for (i in 3:length(expr)) {
argsAsString[i-2] <- deparse(expr[[i]])
argsExpr <- expr[[i]]
}
callAsString <- paste0("dt[,`:=`(",
paste(
paste(colNames, argsAsString,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
wr_assigncols(dt, mpg2=mpg*2)
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(match.call())
args <- as.list(match.call())[-1:-2]
colNames <- names(expr)[3:length(names(expr))]
newColNames <- names(args)
print(newColNames)
argsAsString <- list()
print(args)
for (i in 3:length(expr)) {
argsAsString[i-2] <- deparse(expr[[i]])
argsExpr <- expr[[i]]
}
callAsString <- paste0("dt[,`:=`(",
paste(
paste(colNames, argsAsString,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
wr_assigncols(dt, mpg2=mpg*2)
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(match.call())
args <- as.list(match.call())[-1:-2]
colNames <- names(expr)[3:length(names(expr))]
newColNames <- names(args)
print(newColNames)
argsAsString <- list()
print(args)
print(paste(newColNames, args, sep"="))
for (i in 3:length(expr)) {
argsAsString[i-2] <- deparse(expr[[i]])
argsExpr <- expr[[i]]
}
callAsString <- paste0("dt[,`:=`(",
paste(
paste(colNames, argsAsString,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(match.call())
args <- as.list(match.call())[-1:-2]
colNames <- names(expr)[3:length(names(expr))]
newColNames <- names(args)
print(newColNames)
argsAsString <- list()
print(args)
print(paste(newColNames, args, sep="="))
for (i in 3:length(expr)) {
argsAsString[i-2] <- deparse(expr[[i]])
argsExpr <- expr[[i]]
}
callAsString <- paste0("dt[,`:=`(",
paste(
paste(colNames, argsAsString,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
wr_assigncols(dt, mpg2=mpg*2)
wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^33)
wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
args <- as.list(match.call())[-1:-2]
newColNames <- names(args)
callAsString <- paste0("dt[,`:=`(",
paste(
paste(newColNames, args,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
dt1 <- wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
dt1
dt1
dt
mkdt()
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
args <- as.list(match.call())[-1:-2]
newColNames <- names(args)
callAsString <- paste0("copy(dt)[,`:=`(",
paste(
paste(newColNames, args,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
dt1 <- wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
library(wr.data.table)
mkdt()
dt1 <- wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
library(wr.data.table)
dt1 <- wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
mkdt()
dt1 <- wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
dt1
dt1
dt
dt1
# wr_assignCols works
wr_assigncols1 <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(match.call())
colNames <- names(expr)[3:length(names(expr))]
argsAsString <- list()
for (i in 3:length(expr)) {
argsAsString[i-2] <- deparse(expr[[i]])
argsExpr <- expr[[i]]
}
callAsString <- paste0("dt[,`:=`(",
paste(
paste(colNames, argsAsString,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
microbenchmark::microbenchmark(
wr_assignCols(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assignCols1(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
)
microbenchmark::microbenchmark(
wr_assigncols(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assigncols1(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
)
wr_assigncols(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/'))
microbenchmark::microbenchmark(
wr_assigncols(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assigncols1(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/'))
)
microbenchmark::microbenchmark(
wr_assigncols(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assigncols1(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
times=500
)
microbenchmark::microbenchmark(
wr_assigncols(dt, mpg*2, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assigncols1(dt, mpg*2, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
times=500
)
microbenchmark::microbenchmark(
wr_assigncols(dt, mpg2=mpg*2, mpg2=mpg*2, mpg2=mpg*2, mpg2=mpg*2, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assigncols1(dt, mpg2=mpg*2, mpg2=mpg*2, mpg2=mpg*2, mpg2=mpg*2, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
times=500
)
microbenchmark::microbenchmark(
wr_assigncols(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assigncols1(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
times=500
)
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
args <- as.list(match.call())[-1:-2]
newColNames <- names(args)
callAsString <- paste0("copy(dt)[,`:=`(",
paste(
paste(newColNames, args,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
library(wr.data.table)
mkdt()
dt[,!.(map)]
dt[,!c(map)]
dt[,!c(mpg)]
dt[,!.(mpg)]
dt[,!.("mpg")]
dt[,!c("mpg")]
library(devtools)
test()
test()
dt
test()
wr_filter(dt, gear ==3 & mpg > 17)
dt[gear==3 & mpg>17,]
test()
library(devtools)
test()
test()
test()
library(wr.data.table)
mkdt()
wr_assigncols(dt, mpg2=mpg*2)
library(wr.data.table)
test()
test()
library(wr.data.table)
n()
library(wr.data.table)
mkdt()
dt |> wr_groupby(gear) %>% wr_summarize(mean = mean(mpg), count=n())
dt |> wr_groupby(gear) %>% wr_summarize(mean = mean(mpg), count=.N
)
quote(.N)
library(wr.data.table)
dt |> wr_groupby(gear) %>% wr_summarize(mean = mean(mpg), count=n())
n()
library(wr.data.table)
dt |> wr_groupby(gear) %>% wr_summarize(mean = mean(mpg), count=n())
mkdt)()
mkdt()
dt |> wr_groupby(gear) %>% wr_summarize(mean = mean(mpg), count=n())
#' @description This function simply returns .N when called
#'
#' @usage n()
#'
#' @examples \dontrun{
#' library(magrittr)
#' data1 %>% wr_groupby(gear, am) %>% wr_summarize(mu_mpg = mean(mpg), count = n())
#' }
#'
#' @export
n <- function() {
quote(.N)
}
dt |> wr_groupby(gear) %>% wr_summarize(mean = mean(mpg), count=n())
dt |> wr_groupby(gear) %>% wr_summarize(mean = mean(mpg), count=n())
n()
#'
#' @return returns a \code{data.table}
#'
#' @import data.table
#'
#' @examples
#' \dontrun{
#'   dt <- data.table(mtcars)
#' }
#' @export
wr_summarize <- function(dt, ...) {
# construct a character string of the summary call using data.table syntax
mk_summarize_call <- function(columnNamesAsString, assignmentsAsString, groupNamesAsString=NULL) {
byStatement <- NULL
# no by statement if there's not group in the data.table
if (!is.null(groupNamesAsString)) {
byStatement <- paste0("),by=list(",paste(groupNamesAsString, collapse=","))
}
paste0("dt[,.(",
paste(
paste(columnNamesAsString, assignmentsAsString,sep='='),
collapse=','),
byStatement,
")]")
}
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
# catch function call and convert to (named) list
expr <- as.list(match.call())
print(expr)
# names in list = names for column/variable to be created
# store these names as a character vector
colsAsString <- names(expr)[3:length(names(expr))]
# extract assignments from the call
# store these assignments as a character vector
assignAsString <- lapply(expr[3:length(expr)], function(x)deparse(x))
assignAsString <- unlist(unname(assignAsString))
# NULL if input data.table does not contain $group attribute
groupsAsString <- attributes(dt)$group
callAsString <- NULL
if (is.null(groupsAsString)) {
callAsString <- mk_summarize_call(colsAsString, assignAsString)
eval(parse(text=callAsString))
} else {
# column/variable names used for grouping (in the by statement)
# also order result by grouping variables
callAsString <- mk_summarize_call(colsAsString,assignAsString, groupsAsString)
return_dt <- eval(parse(text=callAsString))
eval(parse(text=paste0(
"return_dt[order(",
paste(groupsAsString,collapse=","),
"),]")))
}
}
dt |> wr_groupby(gear) %>% wr_summarize(mean = mean(mpg), count=n())
library(wr.data.table)
dt |> wr_groupby(gear) %>% wr_summarize(mean = mean(mpg), count=.N
)
library(wr.data.table)
