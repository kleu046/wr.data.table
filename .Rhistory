argsExpr <- expr[[i]]
}
callAsString <- paste0("dt[,`:=`(",
paste(
paste(colNames, argsAsString,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
wr_assigncols(dt, mpg2=mpg*2)
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(match.call())
args <- as.list(match.call())[-1:-2]
colNames <- names(expr)[3:length(names(expr))]
newColNames <- names(args)
print(newColNames)
argsAsString <- list()
print(args)
for (i in 3:length(expr)) {
argsAsString[i-2] <- deparse(expr[[i]])
argsExpr <- expr[[i]]
}
callAsString <- paste0("dt[,`:=`(",
paste(
paste(colNames, argsAsString,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
wr_assigncols(dt, mpg2=mpg*2)
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(match.call())
args <- as.list(match.call())[-1:-2]
colNames <- names(expr)[3:length(names(expr))]
newColNames <- names(args)
print(newColNames)
argsAsString <- list()
print(args)
print(paste(newColNames, args, sep"="))
for (i in 3:length(expr)) {
argsAsString[i-2] <- deparse(expr[[i]])
argsExpr <- expr[[i]]
}
callAsString <- paste0("dt[,`:=`(",
paste(
paste(colNames, argsAsString,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(match.call())
args <- as.list(match.call())[-1:-2]
colNames <- names(expr)[3:length(names(expr))]
newColNames <- names(args)
print(newColNames)
argsAsString <- list()
print(args)
print(paste(newColNames, args, sep="="))
for (i in 3:length(expr)) {
argsAsString[i-2] <- deparse(expr[[i]])
argsExpr <- expr[[i]]
}
callAsString <- paste0("dt[,`:=`(",
paste(
paste(colNames, argsAsString,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
wr_assigncols(dt, mpg2=mpg*2)
wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^33)
wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
args <- as.list(match.call())[-1:-2]
newColNames <- names(args)
callAsString <- paste0("dt[,`:=`(",
paste(
paste(newColNames, args,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
dt1 <- wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
dt1
dt1
dt
mkdt()
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
args <- as.list(match.call())[-1:-2]
newColNames <- names(args)
callAsString <- paste0("copy(dt)[,`:=`(",
paste(
paste(newColNames, args,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
dt1 <- wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
library(wr.data.table)
mkdt()
dt1 <- wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
library(wr.data.table)
dt1 <- wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
mkdt()
dt1 <- wr_assigncols(dt, mpg2=mpg*2, mpg3=mpg^3)
dt1
dt1
dt
dt1
# wr_assignCols works
wr_assigncols1 <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
expr <- as.list(match.call())
colNames <- names(expr)[3:length(names(expr))]
argsAsString <- list()
for (i in 3:length(expr)) {
argsAsString[i-2] <- deparse(expr[[i]])
argsExpr <- expr[[i]]
}
callAsString <- paste0("dt[,`:=`(",
paste(
paste(colNames, argsAsString,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
microbenchmark::microbenchmark(
wr_assignCols(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assignCols1(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
)
microbenchmark::microbenchmark(
wr_assigncols(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assigncols1(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
)
wr_assigncols(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/'))
microbenchmark::microbenchmark(
wr_assigncols(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assigncols1(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/'))
)
microbenchmark::microbenchmark(
wr_assigncols(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assigncols1(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
times=500
)
microbenchmark::microbenchmark(
wr_assigncols(dt, mpg*2, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assigncols1(dt, mpg*2, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
times=500
)
microbenchmark::microbenchmark(
wr_assigncols(dt, mpg2=mpg*2, mpg2=mpg*2, mpg2=mpg*2, mpg2=mpg*2, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assigncols1(dt, mpg2=mpg*2, mpg2=mpg*2, mpg2=mpg*2, mpg2=mpg*2, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
times=500
)
microbenchmark::microbenchmark(
wr_assigncols(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
wr_assigncols1(dt, mpg2=mpg*2, am_vs=paste(am,vs,sep='/')),
times=500
)
#' @import data.table
#'
#' @examples
#' \dontrun{
#' dt <- data.table(mtcars)
#' wr_assigncols(dt, kmpl = mpg / 2.35215, wt_in_kg = wt / 2.20462)
#' # creating two columns / converted units
#' wr_assigncols(dt, am = NULL) # remove a column
#' }
#' @export
wr_assigncols <- function(dt, ...) {
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
args <- as.list(match.call())[-1:-2]
newColNames <- names(args)
callAsString <- paste0("copy(dt)[,`:=`(",
paste(
paste(newColNames, args,sep='='),
collapse=','),
")]")
eval(parse(text=callAsString))
}
library(wr.data.table)
mkdt()
dt[,!.(map)]
dt[,!c(map)]
dt[,!c(mpg)]
dt[,!.(mpg)]
dt[,!.("mpg")]
dt[,!c("mpg")]
library(devtools)
test()
test()
dt
test()
wr_filter(dt, gear ==3 & mpg > 17)
dt[gear==3 & mpg>17,]
test()
library(devtools)
test()
test()
test()
library(wr.data.table)
mkdt()
wr_assigncols(dt, mpg2=mpg*2)
library(wr.data.table)
test()
test()
library(wr.data.table)
n()
library(wr.data.table)
mkdt()
dt |> wr_groupby(gear) %>% wr_summarize(mean = mean(mpg), count=n())
dt |> wr_groupby(gear) %>% wr_summarize(mean = mean(mpg), count=.N
)
quote(.N)
library(wr.data.table)
dt |> wr_groupby(gear) %>% wr_summarize(mean = mean(mpg), count=n())
n()
library(wr.data.table)
dt |> wr_groupby(gear) %>% wr_summarize(mean = mean(mpg), count=n())
mkdt)()
mkdt()
dt |> wr_groupby(gear) %>% wr_summarize(mean = mean(mpg), count=n())
#' @description This function simply returns .N when called
#'
#' @usage n()
#'
#' @examples \dontrun{
#' library(magrittr)
#' data1 %>% wr_groupby(gear, am) %>% wr_summarize(mu_mpg = mean(mpg), count = n())
#' }
#'
#' @export
n <- function() {
quote(.N)
}
dt |> wr_groupby(gear) %>% wr_summarize(mean = mean(mpg), count=n())
dt |> wr_groupby(gear) %>% wr_summarize(mean = mean(mpg), count=n())
n()
#'
#' @return returns a \code{data.table}
#'
#' @import data.table
#'
#' @examples
#' \dontrun{
#'   dt <- data.table(mtcars)
#' }
#' @export
wr_summarize <- function(dt, ...) {
# construct a character string of the summary call using data.table syntax
mk_summarize_call <- function(columnNamesAsString, assignmentsAsString, groupNamesAsString=NULL) {
byStatement <- NULL
# no by statement if there's not group in the data.table
if (!is.null(groupNamesAsString)) {
byStatement <- paste0("),by=list(",paste(groupNamesAsString, collapse=","))
}
paste0("dt[,.(",
paste(
paste(columnNamesAsString, assignmentsAsString,sep='='),
collapse=','),
byStatement,
")]")
}
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
# catch function call and convert to (named) list
expr <- as.list(match.call())
print(expr)
# names in list = names for column/variable to be created
# store these names as a character vector
colsAsString <- names(expr)[3:length(names(expr))]
# extract assignments from the call
# store these assignments as a character vector
assignAsString <- lapply(expr[3:length(expr)], function(x)deparse(x))
assignAsString <- unlist(unname(assignAsString))
# NULL if input data.table does not contain $group attribute
groupsAsString <- attributes(dt)$group
callAsString <- NULL
if (is.null(groupsAsString)) {
callAsString <- mk_summarize_call(colsAsString, assignAsString)
eval(parse(text=callAsString))
} else {
# column/variable names used for grouping (in the by statement)
# also order result by grouping variables
callAsString <- mk_summarize_call(colsAsString,assignAsString, groupsAsString)
return_dt <- eval(parse(text=callAsString))
eval(parse(text=paste0(
"return_dt[order(",
paste(groupsAsString,collapse=","),
"),]")))
}
}
dt |> wr_groupby(gear) %>% wr_summarize(mean = mean(mpg), count=n())
library(wr.data.table)
dt |> wr_groupby(gear) %>% wr_summarize(mean = mean(mpg), count=.N
)
library(wr.data.table)
library(wr.data.table)
mkdt()
dt
substitute(quote(dt), parent.env())
substitute(quote(dt), parent.frame())
substitute(dt, parent.frame())
substitute(dt, parent.frame())
eval(substitute(dt, parent.frame()))
eval(substitute(dt, parent.frame()))
eval(substitute(dt)
)
eval(substitute(mpg, env=dt))
dt
dt[,.N]
dt[,quote(.N)]
dt[,eval(quote(.N))]
n <- function() {}
n<-function(
eval(quote(.N))
)
n<-function{
eval(quote(.N))
}
n<-function(){
eval(quote(.N))
}
dt[,n()]
n<-function(){
expression(quote(.N))
}
dt[,n()]
n<-function(){
expression(quote(.N))
}
dt[,n()]
vac <- data.table(covid)[location != "World" & location != continent & !is.na(people_fully_vaccinated),][,.(vac_rate=max(people_fully_vaccinated)/population, people_fully_vaccinated),by=c("location")]
library(data.table)
vac <- data.table(covid)[location != "World" & location != continent & !is.na(people_fully_vaccinated),][,.(vac_rate=max(people_fully_vaccinated)/population, people_fully_vaccinated),by=c("location")]
source("C:/Users/Ka Lok/OneDrive/Data Science/Mastering software development in R/Building Data Visualization Tools/Building Data Visualization Tools.R", echo=TRUE)
library(magrittr)
# x y coordinate converted to the same as lat and long
serial %<>%
mutate(
long = -76.8854 + 0.00017022 * x,
lat = 39.23822 + 1.371014e-4 * y,
tower = Type == "cell-site"
)
serial
nrow(serial)
serial %>% slice(c(1:3, (n()-3):(n())))
# using ggplot2
maryland <- map_data('county', region = 'maryland')
baltimore <- maryland %>% filter(subregion %in% c("baltimore city", "baltimore"))
b <- ggplot(baltimore, aes(x = long, y = lat, group=group)) +
geom_polygon(fill="lightblue", color = "black") +
theme_void()
b +
geom_point(data = serial, aes(group = NULL, color = tower)) +
scale_color_manual(name = "Cell Tower",
values = c("red", "blue"))
nz_map <- map_data("nz")
nz_map %>% colnames()
nz_map %>%
ggplot(aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=region)) + scale_fill_grey(start=0.1, end = 0.9)
world_map <- map_data("world")
w <- world_map %>%
ggplot(aes(x=long, y=lat, group=group)) +
geom_path()
# coivd data
download.file(url = "https://covid.ourworldindata.org/data/owid-covid-data.csv", destfile = "owid-covid-data.csv")
(covid <-
read_csv("owid-covid-data.csv",
)
)
country_locations <- read_delim("C:/Users/Ka Lok/OneDrive/Data Science/Mastering software development in R/Building Data Visualization Tools/Maps/data/countries.csv", col_types = "cddc", delim="\t")
# coivd data
download.file(url = "https://covid.ourworldindata.org/data/owid-covid-data.csv", destfile = "owid-covid-data.csv")
library(readr)
(covid <-
read_csv("owid-covid-data.csv",
)
)
country_locations <- read_delim("C:/Users/Ka Lok/OneDrive/Data Science/Mastering software development in R/Building Data Visualization Tools/Maps/data/countries.csv", col_types = "cddc", delim="\t")
library(data.table)
vac <- data.table(covid)[location != "World" & location != continent & !is.na(people_fully_vaccinated),][,.(vac_rate=max(people_fully_vaccinated)/population, people_fully_vaccinated),by=c("location")]
vac
vac <- data.table(covid)[location != "World" & location != continent & !is.na(people_fully_vaccinated),][,.(vac_rate=max(people_fully_vaccinated)/population),by=c("location")]
vac
vac <- data.table(covid)[location != "World" & location != continent & !is.na(people_fully_vaccinated),][,.(vac_rate=max(people_fully_vaccinated)/population),by=c("location")]
vac
vac <- data.table(covid)[location != "World" & location != continent & !is.na(people_fully_vaccinated),][,.(vac_rate=max(people_fully_vaccinated)/population, n=.N),by=c("location")]
vac
library(wr.data.table)
dt <- wr_dt_withrownames(data1)
dt |> wr_groupby(gear, vs) |> attributes()
dt |> wr_groupby(gear, vs) |> wr_summarize(mu_mpg=mean(mpg), sd_mpg=sd(mpg), n=.N)
dt |> wr_groupby(gear, vs) |> wr_summarize(mu_mpg=mean(mpg), sd_mpg=sd(mpg), n=.N)
vac <- data.table(covid)[location != "World" & location != continent & !is.na(people_fully_vaccinated),][,.(vac_rate=max(people_fully_vaccinated)/population, n=.N,by=location)]
vac
vac <- data.table(covid)[location != "World" & location != continent & !is.na(people_fully_vaccinated),][,.(vac_rate=max(people_fully_vaccinated)/population, n=.N,by=c("location")]
data.table(list(a=c(1,2,3,3,4,4), b=c(2,2,4,5,6,7)))
data.table(a=c(1,2,3,3,4,4), b=c(2,2,4,5,6,7))
dt <- data.table(a=c(1,2,3,3,4,4), b=c(2,2,4,5,6,7))
dt[,.(b),by=a]
dt[,.(max(b)),by=a]
dt[,.(max=max(b)),by=a]
vac <- data.table(covid)[location != "World" & location != continent & !is.na(people_fully_vaccinated),][,.(location=location, vac_rate=max(people_fully_vaccinated)/population, n=.N)]
vac
vac <- data.table(covid)[location != "World" & location != continent & !is.na(people_fully_vaccinated),][,.(location=location, vac_rate=max(people_fully_vaccinated)/population, n=.N)]
vac
vac <- data.table(covid)[location != "World" & location != continent & !is.na(people_fully_vaccinated),][,.(location=location, vac_rate=people_fully_vaccinated/population)]
vac
vac[.(vac_rate=max(vac_rate)),by=location]
vac[,.(vac_rate=max(vac_rate)),by=location]
vac <- vac[,.(vac_rate=max(vac_rate)),by=location]
vac
vac <- world_map %>% left_join(vac, by=c("region" = "location"))
vac
vac %>% ggplot(aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=vac_rate))
vac$location
vac$region
unique(vac$region)
coivd$region
(covid <-
read_csv("owid-covid-data.csv",
)
)
country_locations <- read_delim("C:/Users/Ka Lok/OneDrive/Data Science/Mastering software development in R/Building Data Visualization Tools/Maps/data/countries.csv", col_types = "cddc", delim="\t")
library(data.table)
vac <- data.table(covid)[location != "World" & location != continent & !is.na(people_fully_vaccinated),][,.(location=location, vac_rate=people_fully_vaccinated/population)]
vac <- vac[,.(vac_rate=max(vac_rate)),by=location]
unique(vac$region)
# coivd data
download.file(url = "https://covid.ourworldindata.org/data/owid-covid-data.csv", destfile = "owid-covid-data.csv")
(covid <-
read_csv("owid-covid-data.csv",
)
)
country_locations <- read_delim("C:/Users/Ka Lok/OneDrive/Data Science/Mastering software development in R/Building Data Visualization Tools/Maps/data/countries.csv", col_types = "cddc", delim="\t")
head(country_locations)
library(data.table)
vac <- data.table(covid)[location != "World" & location != continent & !is.na(people_fully_vaccinated),][,.(location=location, vac_rate=people_fully_vaccinated/population)]
vac <- vac[,.(vac_rate=max(vac_rate)),by=location]
unique(vac$location)
vac <- world_map %>% full_join(vac, by=c("region" = "location"))
vac
vac %>% ggplot(aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=vac_rate))
unique(vac$region)
vac %>% filter(region == "United States")
head(country_locations)
country_location$name
vac %>% filter(region == "United States")
world_map$region
unique(world_map$region)
vac %>% ggplot(aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=vac_rate))
