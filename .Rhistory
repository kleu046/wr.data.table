29 June 2021
Wellington moves to Alert Level 1 at 11:59pm. All of New Zealand is now at Alert Level 1.
17 August 2021
All of New Zealand moves to Alert Level 4 at 11:59pm.
31 August 2021
All of New Zealand south of Auckland moves to Alert Level 3 at 11:59pm.
Auckland and Northland remain at Alert Level 4.
2 September 2021
Northland moves to Alert Level 3 at 11:59pm. All of New Zealand (except Auckland) is now at Alert Level 3.
Auckland remains at Alert Level 4.
7 September 2021
New Zealand (except Auckland) moves to Alert Level 2 at 11:59pm.
Auckland remains at Alert Level 4.
21 September 2021
Auckland and Upper Hauraki move to Alert Level 3 at 11:59pm.
The rest of New Zealand remains at Alert Level 2.
25 September 2021
Upper Hauraki moves to Alert Level 2 at 11:59pm.
Auckland remains at Alert Level 3. The rest of New Zealand remains at Alert Level 2.
3 October 2021
Raglan, Te Kauwhata, Huntly, Ngāruawāhia, Hamilton City and some surrounding areas move to Alert Level 3 for 5 days from 11:59pm.
Auckland remains at Alert Level 3. The rest of New Zealand remains at Alert Level 2.
5 October 2021
Alert Level 3 restrictions in Auckland are eased from 11:59pm.
Raglan, Te Kauwhata, Huntly, Ngāruawāhia, Hamilton City and some surrounding areas remain at Alert Level 3.
The rest of New Zealand remains at Alert Level 2.
7 October 2021
Waikato Alert Level 3 boundary is extended from 11:59pm to include Waitomo District, including Te Kuiti, Waipa District and Ōtorohanga District.
Auckland remains at Alert Level 3 with some restrictions eased.
The rest of New Zealand remains at Alert Level 2.
8 October 2021
Northland moves to Alert Level 3 at 11:59pm.
Auckland and parts of Waikato remain at Alert Level 3.
The rest of New Zealand remains at Alert Level 2.
19 October 2021
Northland moves to Alert Level 2 at 11:59pm.
Auckland and parts of Waikato remain at Alert Level 3.
The rest of New Zealand remains at Alert Level 2.
27 October 2021
The parts of Waikato at Alert Level 3 move to Step 1 of Alert Level 3.
Auckland remains at Step 1 of Alert Level 3.
The rest of New Zealand remains at Alert Level 2.
2 November 2021
Upper Northland moves to Alert Level 3.
The parts of Waikato at Alert Level 3 Step 1 move to Alert Level 3 Step 2 from 11:59pm.
Auckland remains at Step 1 of Alert Level 3.
The rest of New Zealand remains at Alert Level 2.
9 November 2021
Auckland moves to Alert Level 3 Step 2 at 11:59pm.
Upper Northland remains at Alert Level 3.
Parts of Waikato remain at Alert Level 3 Step 1.
The rest of New Zealand remains at Alert Level 2.
11 November 2021
Upper Northland moves to Alert Level 2.
Auckland and parts of Waikato remain at Alert Level 3 Step 2.
The rest of New Zealand remains at Alert Level 2.
16 November 2021
Parts of Waikato move to Alert Level 2.
Auckland remains at Alert Level 3 Step 2.
The rest of New Zealand remains at Alert Level 2.
2 December 2021
All of New Zealand moved to the COVID-19 Protection Framework, also known as the traffic lights.'
# extract event dates
dates <- nz_timeline |> str_extract_all(pattern = "(?<!\\son\\s)[:digit:]{1,2}\\s\\w{3,9}\\s[:digit:]{4}(?=\n)") |> unlist()
# extract events by date
nz_timeline <- nz_timeline |> str_remove_all(pattern = "\n") # remove line breaks
events <- c()
for (i in 1:length(dates)) {
if (i == length(dates)) {
pattern = paste0("(?<=", dates[i],").+")
} else {
pattern = paste0("(?<=",dates[i],").+","(?=",dates[i+1],")")
}
events <- c(events, str_extract(nz_timeline, pattern))
rm(pattern)
}
events <- lapply(events, str_trim) |> unlist() # trim spaces at start and end of string
events <- lapply(events, function(x){gsub("\\.",".<br />", x)}) |> unlist()
# check: num of events extracted == number of dates extracted
length(events) == length(dates)
# construct data.table for events
nz_event_timeline <- data.frame("date"=dmy(dates), "events"=events)
readr::write_csv(nz_event_timeline, "nz_covid_event_timeline.csv")
rm(nz_timeline, dates, events)
total_cases_nz <-
raw |>
filter_rows(location == "New Zealand") |>
sel_cols(date, total_cases, total_deaths)
nz_event_timeline <- merge(nz_event_timeline, total_cases_nz, on = "date")
total_cases_nz |>
filter_rows(total_cases != 0) |>
plotly::plot_ly(
name = "Total Cases",
type = "scatter",
x = ~ date,
y = ~ total_cases,
mode = "lines",
line = list(color=covid_cases_marker, width = 3)
) |>
plotly::add_trace(
name = "Total Deaths",
type = "scatter",
x = ~ date,
y = ~ total_deaths,
mode = "lines",
line = list(color = covid_deaths_marker, width = 3)
) |>
plotly::add_markers(
name = "Events",
x = nz_event_timeline$date,
y = nz_event_timeline$total_cases,
text = paste(nz_event_timeline$date, "<br />", nz_event_timeline$events),
hoverinfo = "text",
mode = "markers",
inherit = FALSE,
marker = list(color = "#0050ff", size = 10, opacity = 0.2)
) |>
plotly::layout(
title = list(
font = list(size = 20),
text = "Accumulative COVID-19 Cases and Key Events In New Zealand",
y = 0.95),
showlegend = TRUE,
xaxis = list(
#gridcolor = "rgb(255,255,255)",
tickfont = list(color = slate_blue_marker),
linecolor = slate_blue_border,
mirror = TRUE,
linewidth = 6),
yaxis = list(
type = "log",
zeroline = TRUE,
zerolinecolor = slate_blue_border,
tickfont = list(color = slate_blue_marker),
linecolor = slate_blue_border,
mirror = TRUE,
linewidth = 6),
margin = list(t = 60, b = 50, r = 0, l = 75)
)
top_80 <-
raw |>
filter_rows(continent != "") |>
sel_cols(date, continent, location, total_cases, total_deaths, population_density)
top_80$total_deaths <- replace(top_80$total_deaths, is.na(top_80$total_deaths),0)
top_80$total_cases <- replace(top_80$total_cases, is.na(top_80$total_cases),0)
top_80 <-
top_80 |>
set_group(continent,location) |>
condense(total_cases = sum(total_cases),
total_deaths = sum(total_deaths),
population_density = mean(population_density)) |>
# filter_rows(!is.na(total_cases)) |>
descend_rows(total_cases)
top_80_count = 1
cumulative_total_cases = 0
total_cases_to_date = sum(top_80$total_cases)
while ((cumulative_total_cases/total_cases_to_date) <= 0.8) {
cumulative_total_cases <- sum(top_80$total_cases[1:top_80_count])
top_80_count <- top_80_count + 1
}
top_80 <- top_80[1:top_80_count,]
top_80 <-
top_80 |>
def_cols(death_rate_pct = round(total_deaths / total_cases, digits=3) * 100) |>
descend_rows(death_rate_pct)
knitr::kable(top_80, "simple")
# fix alternative country/location names in the top ten list
top_80$location <- gsub("United Kingdom", "UK", top_80$location)
top_80$location <- gsub("United States", "USA", top_80$location)
# obtain lat/long data for top ten countries/locations
top_80_map_data <-
data.table::data.table(map_data("world")) |>
sel_cols(lat, long, region) |>
filter_rows(!(long < -130 & region == "USA")) |>
filter_rows(region %in% top_80$location) |>
set_group(region) |>
condense(x=mean(long), y=mean(lat)) |>
rn_cols(region = location)
# merge lat/long locations with data for total_cases
top_80_map <- merge(top_80, top_80_map_data, on = location)
# create map using ggplot
map <- map_data("world") |>
ggplot(aes(x=long, y=lat, group=group)) +
geom_polygon(colour = "grey20", fill = "rosybrown2", size = 0.1) +
mytheme +
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill="lightblue4")) +
ggtitle("80% of Total COVID-19 Cases")
# create plotly interactive map with bubbles showing top 10 counrties/locations
plotly::ggplotly(map) |>
plotly::add_trace(name = "Cases",
mode = "markers",
x = top_80_map$x - top_80_map$total_cases/2e9,
y = top_80_map$y,
marker=list(size = top_80_map$total_cases/max(top_80_map$total_cases)*200, color = covid_cases_marker),
text = paste(top_80_map$location,"<br />total cases: ", top_80_map$total_cases)) |>
plotly::add_trace(name = "Deaths",
mode = "markers",
x = top_80_map$x - top_80_map$total_cases/2e9,
y = top_80_map$y,
marker=list(size = top_80_map$total_deaths/max(top_80_map$total_cases)*400, color = covid_deaths_marker),
text = paste(top_80_map$location,
"<br />total deaths: ",
top_80_map$total_deaths,
"<br />death rate",
round(top_80_map$total_deaths/top_80_map$total_cases, digits=3) * 100,
"%")) |>
plotly::layout(
title = list(
font = list(size = 20),
text = "Accumulative COVID-19 Cases and Deaths Worldwide",
y = 0.95),
showlegend = FALSE,
showgrid = FALSE,
xaxis = list(
tickfont = list(color = "grey20"),
linecolor = "grey20",
mirror = TRUE,
linewidth = 6),
yaxis = list(
tickfont = list(color = "grey20"),
linecolor = "grey20",
mirror = TRUE,
linewidth = 6)
)
temp <-
top_80 |>
def_cols(location = as.factor(location),
total_cases_per_population_density = total_cases/population_density,
total_deaths_per_population_density = total_deaths/population_density) |>
def_cols(total_cases = total_cases/max(total_cases),
total_deaths = total_deaths/max(total_cases),
total_cases_per_population_density = total_cases_per_population_density / max(total_cases_per_population_density),
total_deaths_per_population_density = total_deaths_per_population_density / max(total_cases_per_population_density))
top_80_cases <- data.table::melt(temp,
id.vars= c("location", "continent"),
measure.vars = c("total_cases",
"total_deaths",
"total_cases_per_population_density",
"total_deaths_per_population_density"))
top_80_cases |>
filter_rows(variable != "total_deaths" & variable != "total_deaths_per_population_density") |>
ggplot() +
geom_bar(aes(x=forcats::fct_reorder(location, value), y = -value, fill=variable, width = 0.5),stat="identity", position=position_dodge2()) +
mytheme +
scale_fill_brewer(palette="Paired") +
coord_polar()
top_80_cases |>
filter_rows(variable != "total_cases" & variable != "total_cases_per_population_density") |>
ggplot() +
geom_bar(aes(x=forcats::fct_reorder(location, value), y = -value, fill=variable, width = 0.5),stat="identity", position=position_dodge2()) +
mytheme +
scale_fill_brewer(palette="Paired") +
coord_polar()
# fix alternative country/location names in the top ten list
top_80$location <- gsub("United Kingdom", "UK", top_80$location)
top_80$location <- gsub("United States", "USA", top_80$location)
# obtain lat/long data for top ten countries/locations
top_80_map_data <-
data.table::data.table(map_data("world")) |>
sel_cols(lat, long, region) |>
filter_rows(!(long < -130 & region == "USA")) |>
filter_rows(region %in% top_80$location) |>
set_group(region) |>
condense(x=mean(long), y=mean(lat)) |>
rn_cols(region = location)
# merge lat/long locations with data for total_cases
top_80_map <- merge(top_80, top_80_map_data, on = location)
# create map using ggplot
map <- map_data("world") |>
ggplot(aes(x=long, y=lat, group=group)) +
geom_polygon(colour = "grey20", fill = "rosybrown2", size = 0.1) +
mytheme +
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill="lightblue4")) +
ggtitle("80% of Total COVID-19 Cases")
# create plotly interactive map with bubbles showing top 10 counrties/locations
plotly::ggplotly(map) |>
plotly::add_trace(name = "Cases",
mode = "markers",
x = top_80_map$x - top_80_map$total_cases/2e9,
y = top_80_map$y,
marker=list(size = top_80_map$total_cases/max(top_80_map$total_cases)*200, color = covid_cases_marker),
text = paste(top_80_map$location,"<br />total cases: ", top_80_map$total_cases)) |>
plotly::add_trace(name = "Deaths",
mode = "markers",
x = top_80_map$x - top_80_map$total_cases/2e9,
y = top_80_map$y,
marker=list(size = top_80_map$total_deaths/max(top_80_map$total_cases)*800, color = covid_deaths_marker),
text = paste(top_80_map$location,
"<br />total deaths: ",
top_80_map$total_deaths,
"<br />death rate",
round(top_80_map$total_deaths/top_80_map$total_cases, digits=3) * 100,
"%")) |>
plotly::layout(
title = list(
font = list(size = 20),
text = "Accumulative COVID-19 Cases and Deaths Worldwide",
y = 0.95),
showlegend = FALSE,
showgrid = FALSE,
xaxis = list(
tickfont = list(color = "grey20"),
linecolor = "grey20",
mirror = TRUE,
linewidth = 6),
yaxis = list(
tickfont = list(color = "grey20"),
linecolor = "grey20",
mirror = TRUE,
linewidth = 6)
)
detect_no_record <- function(dt, var_name) {
select_columns <- c("location", var_name)
dt |>
sel_cols(select_columns) |>
def_cols(is.na ~ is.na(var_name)) |>
set_group(location, is.na) |>
condense(no_of_na_record = .N) |>
spread(is.na, no_of_na_record) |>
def_cols(no_record = ifelse(is.na(`FALSE`) & is.na(`TRUE`), T, F))
}
detect_no_record(raw, "total_cases")
detect_no_record <- function(dt, var_name) {
select_columns <- c("location", var_name)
dt |>
sel_cols(select_columns) |>
def_cols(is.na ~ is.na(var_name)) #|>
#set_group(location, is.na) |>
#condense(no_of_na_record = .N) |>
#spread(is.na, no_of_na_record) |>
#def_cols(no_record = ifelse(is.na(`FALSE`) & is.na(`TRUE`), T, F))
}
detect_no_record(raw, "total_cases")
library(wr.data.table)
library(wr.data.table)
knitr::opts_chunk$set(echo = FALSE,
cached = TRUE,
warning = FALSE,
root.dir = paste0(getwd(),"/R/COVID-19")
)
getwd()
# To install wr.data.table use:
# devtools::install_github("kleu046/wr.data.table")
library(wr.data.table)
library(ggplot2)
library(grid)
library(gridExtra)
library(lubridate)
library(stringr)
slate_blue_zeroline <- "rgb(91,124,153)"
slate_blue_zeroline_hex <- "#5B7C99"
slate_blue_border <- "rgb(130,154,183)"
slate_blue_border_hex <- "#829AB7"
slate_blue_marker <- "rgb(30, 66, 125)"
slate_blue_marker_hex <- "#1E427D"
covid_cases_marker <- "rgb(255,223,0)"
covid_cases_marker_hex <- "#ffdf00"
covid_deaths_marker <- "rgb(255,112,112)"
covid_deaths_marker_hex <- "#ff7070"
mytheme <- theme_get()
if (Sys.info()[1] != "Windows") {
mytheme <-
theme(
plot.title = element_text(
face = "plain",
family = "Avenir Next",
size = 20,
colour = "black"
),
plot.subtitle = element_text(
face = "italic",
family = "Avenir Next",
size = 16,
colour = "black"
),
axis.title = element_text(
face= "plain",
family = "Avenir Next",
size = 12,
#colour = "slategray4"
colour = slate_blue_marker_hex
),
axis.text = element_text(
face= "plain",
family = "Skia",
size = 10,
#colour = "slategray4"
colour = slate_blue_marker_hex
),
axis.line = element_line(
# colour = "slategray2",
colour = slate_blue_zeroline_hex,
size = 0.3
),
panel.grid.major = element_line(
# colour = "gray90",
colour = "grey80",
size = 0.1
),
panel.grid.minor = element_blank(),
legend.title = element_text(
face = "plain",
family = "Avenir Next",
size = 12,
# colour = "slategray4"
colour = slate_blue_marker_hex
),
legend.text = element_text(
face = "plain",
family = "Skia",
size = 10,
# colour = "slategray4"
colour = slate_blue_marker_hex
),
panel.background = element_blank(),
panel.border = element_rect(
#colour = "azure3",
colour = slate_blue_border_hex,
size = 5,
fill = NA
),
plot.caption.position = "panel",
plot.caption = element_text(
hjust = 0,
family = "Skia",
face = "italic",
#color = "slategray3"
color = slate_blue_marker_hex
)
)
}
detect_no_record <- function(dt, var_name) {
select_columns <- c("location", var_name)
dt |>
sel_cols(select_columns) |>
def_cols(is.na ~ is.na(var_name)) #|>
#set_group(location, is.na) |>
#condense(no_of_na_record = .N) |>
#spread(is.na, no_of_na_record) |>
#def_cols(no_record = ifelse(is.na(`FALSE`) & is.na(`TRUE`), T, F))
}
detect_no_record(raw, "total_cases")
detect_no_record <- function(dt, var_name) {
select_columns <- c("location", var_name)
dt |>
sel_cols(select_columns) |>
def_cols(is.na ~ is.na(var_name)) #|>
set_group(location, is.na) |>
condense(no_of_na_record = .N) |>
spread(is.na, no_of_na_record) |>
def_cols(no_record = ifelse(is.na(`FALSE`) & is.na(`TRUE`), T, F))
}
detect_no_record(raw, "total_cases")
detect_no_record <- function(dt, var_name) {
select_columns <- c("location", var_name)
dt |>
sel_cols(select_columns) |>
def_cols(is.na ~ is.na(var_name)) |>
set_group(location, is.na) |>
condense(no_of_na_record = .N) |>
spread(is.na, no_of_na_record) |>
def_cols(no_record = ifelse(is.na(`FALSE`) & is.na(`TRUE`), T, F))
}
detect_no_record(raw, "total_cases")
temp <- detect_no_record(raw, "total_cases")
temp
temp
detect_no_record <- function(dt, var_name) {
select_columns <- c("location", var_name)
dt |>
sel_cols(select_columns) |>
def_cols(is.na ~ is.na(var_name)) |>
set_group(location, is.na) |>
condense(no_of_na_record = .N) |>
spread(is.na, no_of_na_record) |>
def_cols(no_record ~ ifelse(is.na(`FALSE`) & is.na(`TRUE`), T, F))
}
temp <- detect_no_record(raw, "total_cases")
detect_no_record <- function(dt, var_name) {
select_columns <- c("location", var_name)
dt |>
sel_cols(select_columns) |>
def_cols(is.na ~ is.na(dt[[var_name]])) |>
set_group(location, is.na) |>
condense(no_of_na_record = .N) |>
spread(is.na, no_of_na_record) |>
def_cols(no_record ~ ifelse(is.na(`FALSE`) & is.na(`TRUE`), T, F))
}
temp <- detect_no_record(raw, "total_cases")
temp
temp
detect_no_record <- function(dt, var_name) {
select_columns <- c("location", var_name)
dt |>
sel_cols(select_columns) |>
def_cols(is.na ~ is.na(dt[[var_name]])) |>
set_group(location, is.na) |>
condense(no_of_na_record = .N) |>
spread(is.na, no_of_na_record) |>
def_cols(no_record ~ ifelse(is.na(`FALSE`) & is.na(`TRUE`), T, F)) |>
filter_rows(no_record == TRUE)
}
temp <- detect_no_record(raw, "total_cases")
temp
