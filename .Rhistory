callAsString <- mk_summarize_call(colsAsString,assignAsString, groupsAsString)
return_dt <- eval(parse(text=callAsString))
eval(parse(text=paste0(
"return_dt[order(",
paste(groupsAsString,collapse=","),
"),]")))
}
}
dt1 |> wr_summarize2(mu=mean(mpg), sig=sd(mpg))
#'
#' @return returns a \code{data.table}
#'
#' @import data.table
#'
#' @examples
#' \dontrun{
#'   dt <- data.table(mtcars)
#' }
#' @export
wr_summarize2 <- function(dt, ...) {
# construct a character string of the summary call using data.table syntax
mk_summarize_call <- function(columnNamesAsString, assignmentsAsString, groupNamesAsString=NULL) {
byStatement <- NULL
# no by statement if there's not group in the data.table
if (!is.null(groupNamesAsString)) {
byStatement <- paste0("),by=list(",paste(groupNamesAsString, collapse=","))
}
paste0("dt[,.(",
paste(
paste(columnNamesAsString, assignmentsAsString,sep='='),
collapse=','),
byStatement,
")]")
}
stopifnot("dt must be data.table" = any(class(dt) == "data.table"))
# catch function call and convert to (named) list
expr <- as.list(match.call())
# names in list = names for column/variable to be created
# store these names as a character vector
colsAsString <- names(expr)[3:length(names(expr))]
# extract assignments from the call
# store these assignments as a character vector
assignAsString <- lapply(expr[3:length(expr)], function(x)deparse(x)) |> unname() |> unlist()
# NULL if input data.table does not contain $group attribute
groupsAsString <- attributes(dt)$group
callAsString <- NULL
if (is.null(groupsAsString)) {
callAsString <- mk_summarize_call(colsAsString, assignAsString)
eval(parse(text=callAsString))
} else {
# column/variable names used for grouping (in the by statement)
# also order result by grouping variables
callAsString <- mk_summarize_call(colsAsString,assignAsString, groupsAsString)
return_dt <- eval(parse(text=callAsString))
eval(parse(text=paste0(
"return_dt[order(",
paste(groupsAsString,collapse=","),
"),]")))
}
}
dt1 |> wr_summarize2(mu=mean(mpg), sig=sd(mpg))
dt1
library(wr.data.table)
devtools::document()
library(wr.data.table)
test_that("data.table is created with row names", {
expect_that(wr_dt_withrownames(mtcars), is_a("data.table"))
expect_identical(wr_dt_withrownames(mtcars),
data.table(rn=rownames(mtcars),mtcars))
})
dt
dt[,.(mpg:hp)]
dt[,.("mpg:hp")]
dt[,.("mpg:hp")]dt
dt
dt[,.("mpg":"hp")]
dt[,("mpg":"hp")]
colnames(mtcars)
testthat::test_check()
testthat::test_check('wr.data.table')
testthat::test_check('wr.data.table')
usethis::use_testthat()
testthat::test_check('wr.data.table')
library(wr.data.table)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(wr.data.table)
library(data.table)
library(dplyr)
dt <- data.table(mtcars)
wr_dt_withrownames <- function(dt, n) {
for (i in 1:n) {
dt <- rbind(dt, dt)
}
data.table(dt)
}
manyRows <- lapply(c(2,5,10),function(x){wr_dt_withrownames(dt, x)})
str(manyRows)
dtwithmanycols <- function(dt,n ) {
for (i in 1:n) {
dt <- cbind(dt, dt)
}
data.table(dt, check.names = TRUE)
}
manyCols <- lapply(c(2,5,10), function(x){dtwithmanycols(dt, x)})
str(manyCols)
getDT <- function(x) {
x[1]
}
dt <- data.table(mtcars)
wr_dt_withrownames <- function(dt, n) {
for (i in 1:n) {
dt <- rbind(dt, dt)
}
data.table(dt)
}
manyRows <- lapply(c(2,5,10),function(x){wr_dt_withrownames(dt, x)})
str(manyRows)
dtwithmanycols <- function(dt,n ) {
for (i in 1:n) {
dt <- cbind(dt, dt)
}
data.table(dt, check.names = TRUE)
}
manyCols <- lapply(c(2,5,10), function(x){dtwithmanycols(dt, x)})
str(manyCols)
getDT <- function(x) {
x[1]
}
dt <- data.table(mtcars)
wr_dt_withrownames <- function(dt, n) {
for (i in 1:n) {
dt <- rbind(dt, dt)
}
data.table(dt)
}
manyRows <- lapply(c(2,5,10),function(x){wr_dt_withrownames(dt, x)})
str(manyRows)
dtwithmanycols <- function(dt,n ) {
for (i in 1:n) {
dt <- cbind(dt, dt)
}
data.table(dt, check.names = TRUE)
}
manyCols <- lapply(c(2,5,10), function(x){dtwithmanycols(dt, x)})
str(manyCols)
getDT <- function(x) {
x[1]
}
dt <- data.table(mtcars)
wr_dt_withrownames <- function(dt, n) {
for (i in 1:n) {
dt <- rbind(dt, dt)
}
data.table(dt)
}
manyRows <- lapply(c(2,5,10),function(x){wr_dt_withrownames(dt, x)})
str(manyRows)
dtwithmanycols <- function(dt,n ) {
for (i in 1:n) {
dt <- cbind(dt, dt)
}
data.table(dt, check.names = TRUE)
}
manyCols <- lapply(c(2,5,10), function(x){dtwithmanycols(dt, x)})
str(manyCols)
getDT <- function(x) {
x[1]
}
dt <- data.table(mtcars)
wr_dt_withrownames <- function(dt, n) {
for (i in 1:n) {
dt <- rbind(dt, dt)
}
data.table(dt)
}
manyRows <- lapply(c(2,5,10),function(x){wr_dt_withrownames(dt, x)})
str(manyRows)
dtwithmanycols <- function(dt,n ) {
for (i in 1:n) {
dt <- cbind(dt, dt)
}
data.table(dt, check.names = TRUE)
}
manyCols <- lapply(c(2,5,10), function(x){dtwithmanycols(dt, x)})
str(manyCols)
getDT <- function(x) {
x[1]
}
dt <- data.table(mtcars)
wr_dt_withrownames <- function(dt, n) {
for (i in 1:n) {
dt <- rbind(dt, dt)
}
data.table(dt)
}
manyRows <- lapply(c(2,5,10),function(x){wr_dt_withrownames(dt, x)})
str(manyRows)
dtwithmanycols <- function(dt,n ) {
for (i in 1:n) {
dt <- cbind(dt, dt)
}
data.table(dt, check.names = TRUE)
}
manyCols <- lapply(c(2,5,10), function(x){dtwithmanycols(dt, x)})
str(manyCols)
getDT <- function(x) {
x[1]
}
result_wr_summarize <- purrr:map(manyRows, function(x){
microbenchmark::microbenchmark(
wr_groupby(getDT(x), gear, am) |> wr_summarise(mu_mpg=mean(mpg),sd_mpg=sd(mpg)),
getDT(x)[,.(mu_mpg=mean(mpg),sd_mpg=sd(mpg)),by=list(gear,am)],
getDT(x) |> group_by(gear, am) |> summarise(mu_mpg=mean(mpg),sd_mpg=sd(mpg))
)
})
result_wr_summarize <- purrr::map(manyRows, function(x){
microbenchmark::microbenchmark(
wr_groupby(getDT(x), gear, am) |> wr_summarise(mu_mpg=mean(mpg),sd_mpg=sd(mpg)),
getDT(x)[,.(mu_mpg=mean(mpg),sd_mpg=sd(mpg)),by=list(gear,am)],
getDT(x) |> group_by(gear, am) |> summarise(mu_mpg=mean(mpg),sd_mpg=sd(mpg))
)
})
library(wr.data.table)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(wr.data.table)
library(data.table)
library(dplyr)
dt <- data.table(mtcars)
wr_dt_withrownames <- function(dt, n) {
for (i in 1:n) {
dt <- rbind(dt, dt)
}
data.table(dt)
}
manyRows <- lapply(c(2,5,10),function(x){wr_dt_withrownames(dt, x)})
str(manyRows)
dtwithmanycols <- function(dt,n ) {
for (i in 1:n) {
dt <- cbind(dt, dt)
}
data.table(dt, check.names = TRUE)
}
manyCols <- lapply(c(2,5,10), function(x){dtwithmanycols(dt, x)})
str(manyCols)
getDT <- function(x) {
x[1]
}
# wr_order
result_wr_order_rows <- purrr::map(manyRows, function(x) {
microbenchmark::microbenchmark(
wr_order(getDT(x), am, vs),
setorder(getDT(x),am,vs),
getDT(x) |> arrange(am, vs))
})
result_wr_order_rows
purrr::map(result, boxplot)
#result_wr_order_rows
purrr::map(result_wr_order_rows, boxplot)
result_wr_order_cols <- purrr::map(manyCols, function(x) {
microbenchmark::microbenchmark(
wr_order(getDT(x), am, vs),
setorder(getDT(x),am,vs),
getDT(x) |> dplyr::arrange(am, vs))
})
#result_wr_order_cols
purrr::map(result_wr_order_cols, boxplot)
result_wr_summarize_rows <- purrr::map(manyRows, function(x){
microbenchmark::microbenchmark(
wr_groupby(getDT(x), gear, am) |> wr_summarise(mu_mpg=mean(mpg),sd_mpg=sd(mpg)),
getDT(x)[,.(mu_mpg=mean(mpg),sd_mpg=sd(mpg)),by=list(gear,am)],
getDT(x) |> group_by(gear, am) |> summarise(mu_mpg=mean(mpg),sd_mpg=sd(mpg))
)
})
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(wr.data.table)
library(data.table)
library(dplyr)
result_wr_order_cols <- purrr::map(manyCols, function(x) {
microbenchmark::microbenchmark(
wr_order(getDT(x), am, vs),
setorder(getDT(x),am,vs),
getDT(x) |> dplyr::arrange(am, vs))
})
dt <- data.table(mtcars)
wr_dt_withrownames <- function(dt, n) {
for (i in 1:n) {
dt <- rbind(dt, dt)
}
data.table(dt)
}
manyRows <- lapply(c(2,5,10),function(x){wr_dt_withrownames(dt, x)})
str(manyRows)
dtwithmanycols <- function(dt,n ) {
for (i in 1:n) {
dt <- cbind(dt, dt)
}
data.table(dt, check.names = TRUE)
}
manyCols <- lapply(c(2,5,10), function(x){dtwithmanycols(dt, x)})
str(manyCols)
getDT <- function(x) {
x[1]
}
result_wr_order_cols <- purrr::map(manyCols, function(x) {
microbenchmark::microbenchmark(
wr_order(getDT(x), am, vs),
setorder(getDT(x),am,vs),
getDT(x) |> dplyr::arrange(am, vs))
})
#result_wr_order_cols
purrr::map(result_wr_order_cols, boxplot)
result_wr_summarize_rows <- purrr::map(manyRows, function(x){
microbenchmark::microbenchmark(
wr_groupby(getDT(x), gear, am) |> wr_summarise(mu_mpg=mean(mpg),sd_mpg=sd(mpg)),
getDT(x)[,.(mu_mpg=mean(mpg),sd_mpg=sd(mpg)),by=list(gear,am)],
getDT(x) |> group_by(gear, am) |> summarise(mu_mpg=mean(mpg),sd_mpg=sd(mpg))
)
})
result_wr_summarize_rows <- purrr::map(manyRows, function(x){
microbenchmark::microbenchmark(
wr_groupby(getDT(x), gear, am) |> wr_summarize(mu_mpg=mean(mpg),sd_mpg=sd(mpg)),
getDT(x)[,.(mu_mpg=mean(mpg),sd_mpg=sd(mpg)),by=list(gear,am)],
getDT(x) |> group_by(gear, am) |> summarise(mu_mpg=mean(mpg),sd_mpg=sd(mpg))
)
})
purrr::map(result_wr_summarize_rows, boxplot)
result_wr_summarize <- purrr::map(manyCols, function(x){
microbenchmark::microbenchmark(
wr_groupby(getDT(x), gear, am) |> wr_summarize(mu_mpg=mean(mpg),sd_mpg=sd(mpg)),
getDT(x)[,.(mu_mpg=mean(mpg),sd_mpg=sd(mpg)),by=list(gear,am)],
getDT(x) |> group_by(gear, am) |> summarise(mu_mpg=mean(mpg),sd_mpg=sd(mpg))
)
})
result_wr_summarize_cols <- purrr::map(manyCols, function(x){
microbenchmark::microbenchmark(
wr_groupby(getDT(x), gear, am) |> wr_summarize(mu_mpg=mean(mpg),sd_mpg=sd(mpg)),
getDT(x)[,.(mu_mpg=mean(mpg),sd_mpg=sd(mpg)),by=list(gear,am)],
getDT(x) |> group_by(gear, am) |> summarise(mu_mpg=mean(mpg),sd_mpg=sd(mpg))
)
})
result_wr_summarize_cols
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(wr.data.table)
library(data.table)
library(dplyr)
dt <- data.table(mtcars)
wr_dt_withrownames <- function(dt, n) {
for (i in 1:n) {
dt <- rbind(dt, dt)
}
data.table(dt)
}
manyRows <- lapply(c(2,5,10),function(x){wr_dt_withrownames(dt, x)})
str(manyRows)
dtwithmanycols <- function(dt,n ) {
for (i in 1:n) {
dt <- cbind(dt, dt)
}
data.table(dt, check.names = TRUE)
}
manyCols <- lapply(c(2,5,10), function(x){dtwithmanycols(dt, x)})
str(manyCols)
getDT <- function(x) {
x[1]
}
result_wr_summarize_cols <- purrr::map(manyCols, function(x){
microbenchmark::microbenchmark(
wr_groupby(getDT(x), gear, am) |> wr_summarize(mu_mpg=mean(mpg),sd_mpg=sd(mpg)),
getDT(x)[,.(mu_mpg=mean(mpg),sd_mpg=sd(mpg)),by=list(gear,am)],
getDT(x) |> group_by(gear, am) |> summarise(mu_mpg=mean(mpg),sd_mpg=sd(mpg))
)
})
purrr::map(result_wr_summarize_cols, boxplot)
result_wr_summarize_cols
library(testthat)
test_check('wr.data.table')
library(usethis)
use_test()
use_test()
use_test()
source("C:/Users/Ka Lok/OneDrive/Data Science/R/myPackages/wr.data.table/tests/testthat.R", echo=TRUE)
source("C:/Users/Ka Lok/OneDrive/Data Science/R/myPackages/wr.data.table/tests/testthat.R", echo=TRUE)
test_check('wr.data.table')
use_test()
use_test()
use_test()
use_test()
test_check('wr.data.table')
use_testthat()
test()
library(devtools)
test()
library(devtools)
test()
test()
library(wr.data.table)
test_that("data.table is created with row names", {
expect_tyoe(wr_select(data.table(data1), mpg), "data.table")
expect_equals(colnames(wr_select(data.table(data1), vs, mpg:hp, am)),
c("mpg", "cyl", "disp", "hp", "vs", "am"))
})
?expect_type
expect_type(wr_select(data.table(data1), mpg), "data.table")
wr_select(data.table(data1), mpg)
library(wr.data.table)
mkdt()
wr_select(dt, mpg)
test_that("data.table is created with row names", {
expect_type(wr_select(data.table(data1), mpg), "data.table")
expect_equals(colnames(wr_select(data.table(data1), vs, mpg:hp, am)),
c("mpg", "cyl", "disp", "hp", "vs", "am"))
})
test_that("data.table is created with row names", {
expect_type(wr_select(data.table::data.table(data1), mpg), "data.table")
expect_equals(colnames(wr_select(data.table::data.table(data1), vs, mpg:hp, am)),
c("mpg", "cyl", "disp", "hp", "vs", "am"))
})
wr_select(data.table::data.table(data1), mpg)
class(wr_select(data.table::data.table(data1), mpg))
test_that("data.table is created with row names", {
expect_that(wr_select(data.table::data.table(data1), mpg), is_a("data.table"))
expect_equals(colnames(wr_select(data.table::data.table(data1), vs, mpg:hp, am)),
c("mpg", "cyl", "disp", "hp", "vs", "am"))
})
test_that("data.table is created with row names", {
expect_that(wr_select(data.table::data.table(data1), mpg), is_a("data.table"))
expect_equal(colnames(wr_select(data.table::data.table(data1), vs, mpg:hp, am)),
c("mpg", "cyl", "disp", "hp", "vs", "am"))
})
test_that("data.table is created with row names", {
expect_s3_class(wr_select(data.table::data.table(data1), mpg), "data.table")
expect_equal(colnames(wr_select(data.table::data.table(data1), vs, mpg:hp, am)),
c("mpg", "cyl", "disp", "hp", "vs", "am"))
})
test()
test_that("data.table is created with row names", {
expect_s3_class(wr_select(data.table::data.table(data1), mpg), "data.table")
expect_identical(wr_dt_withrownames(data1),
data.table(rn=rownames(data1),data1))
})
rm(dt)
mkdt()
dt[order(vs, am)]
test()
devtools::load_all()
library(wr.data.table)
devtools::test()
devtools::load_all()
mkdt()
dt |> wr_assigncols(mpg2 = mpg*2, vs_am= paste(vs,am))
devtools::load_all()
dt |> wr_assigncols(mpg2 = mpg*2, vs_am= paste(vs,am))
dt |> wr_assigncols(mpg2 = mpg*2)
dt[,`:=`(mpg2=mpg*2)]
dt |> wr_assigncols(mpg2 = mpg*2)
load_all()
dt |> wr_assigncols(mpg2 = mpg*2)
dt1 <- dt |> wr_assigncols(mpg2 = mpg*2)
dt1
dt1
dt1 <- dt |> wr_assigncols(mpg2 = mpg*2, vs_am=paste(vs,am))
dt1
dt1
devtools::use_travis()
library(devtools)
use_travis()
use_github_action()
?use_github_action
?use_github_actions
?use_github_actions("travis")
use_github_actions("travis")
use_github_actions(travis)
use_github_actions(.travis)
use_github_actions(".travis")
use_github_actions("travis")
use_github_actions(".travis.yml")
use_github_actions()
use_github_actions()
use_travis()
path.expand('~')
path.expand
path.expand(`~`)
path.expand('~')
getwd)()
getwd()
system.file()
ls(system.file())
getwd
getwd()
.Platform$OS.type
.Machine
?.Platform
.Platform$file.sep
.Platform$GUI
Sys.info
.Machine$double.xmax
.Machine$double.eps
qpdf
devtools::check()
.Rprofile
.Rprofile
.Renviron
?.Rprofile
.Rprofile
.Machine
.Platform
.Machine
Sys.info
Sys.info()
options()
qpdf
devtools::check()
